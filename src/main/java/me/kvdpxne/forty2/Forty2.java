package me.kvdpxne.forty2;

import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Objects;
import java.util.Random;

/**
 * Library class for generating unique identifiers with customizable length and
 * character sets.
 */
public final class Forty2 {

  /**
   * Default size of the generated random identifiers.
   */
  public static final int DEFAULT_SIZE = 14;

  /**
   * Private constructor to prevent instantiation.
   *
   * @deprecated This constructor is deprecated and throws an error if called.
   */
  @Deprecated
  private Forty2() {
    throw new InstatiationError(this.getClass());
  }

  /**
   * Constructs a string from the given array of bytes using US-ASCII encoding.
   *
   * @param bytes The array of bytes to be used for constructing the string.
   * @return The string constructed from the array of bytes using US-ASCII
   * encoding.
   */
  private static String constructString(
    final byte[] bytes
  ) {
    return new String(bytes, StandardCharsets.US_ASCII);
  }

  /**
   * Generates a random string of specified size using the provided characters,
   * mask, step, and a random number generator.
   * <p>
   * If the length of the byte array is 1, the generated string (identifier)
   * will consist only of that single character.
   * </p>
   * <p>
   * Note: This method is considered unsafe as it does not perform any
   * validation checks, such as checking for null or empty values. It assumes
   * that the provided parameters are valid and does not handle potential edge
   * cases.
   * </p>
   *
   * @param random     The Random object used to generate random bytes.
   * @param characters The characters to be used for generating the random
   *                   string.
   * @param mask       A mask used to limit the range of characters that can be
   *                   chosen randomly.
   * @param step       The step size used to iterate through the generated
   *                   random bytes.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   */
  public static String _create(
    final Random random,
    final byte[] characters,
    final int mask,
    final int step,
    final int size
  ) {
    // Determine the length of the character array.
    final int length = characters.length;

    // Initialize a result byte array.
    final byte[] result = new byte[size];

    // If only one character is provided, fill the result with that character.
    if (1 == length) {
      Arrays.fill(result, characters[0]);
      return constructString(result);
    }

    // Initialize a byte array for random bytes.
    final byte[] bytes = new byte[step];

    // Initialize loop variables.
    int i;
    int j;
    int k;

    // Continue generating random strings until one of the correct size
    // is produced.
    do {
      // Generate random bytes.
      random.nextBytes(bytes);

      // Reset loop variables.
      i = 0;
      j = 0;

      // Iterate through the generated bytes.
      while (step > i) {
        // Extract a random index using the mask.
        k = bytes[i] & mask;
        ++i;

        // If the random index is out of range, skip to the next iteration.
        if (length <= k) {
          continue;
        }

        // Add the selected character to the result array.
        result[j] = characters[k];
        ++j;

        // If the desired size is reached, return the generated string.
        if (size == j) {
          return constructString(result);
        }
      }
      // Continue looping until a string of the desired size is generated.
    } while (true);
  }

  /**
   * Generates a random string of specified size using the provided characters,
   * mask, and a random number generator.
   * <p>
   * If the length of the byte array is 1, the generated string (identifier)
   * will consist only of that single character.
   * </p>
   * <p>
   * Note: This method is considered unsafe as it does not perform any
   * validation checks, such as checking for null or empty values. It assumes
   * that the provided parameters are valid and does not handle potential edge
   * cases.
   * </p>
   *
   * @param random     The Random object used to generate random bytes.
   * @param characters The characters to be used for generating the random
   *                   string.
   * @param mask       A mask used to limit the range of characters that can be
   *                   chosen randomly.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   */
  public static String _create(
    final Random random,
    final byte[] characters,
    final int mask,
    final int size
  ) {
    return _create(
      random,
      characters,
      mask,
      16384 - (int) (16384f - 1.6f * mask * size / characters.length),
      size
    );
  }

  /**
   * Generates a random string of specified size using the provided characters
   * and a random number generator.
   * <p>
   * If the length of the byte array is 1, the generated string (identifier)
   * will consist only of that single character.
   * </p>
   * <p>
   * Note: This method is considered unsafe as it does not perform any
   * validation checks, such as checking for null or empty values. It assumes
   * that the provided parameters are valid and does not handle potential edge
   * cases.
   * </p>
   *
   * @param random     The Random object used to generate random bytes.
   * @param characters The characters to be used for generating the random
   *                   string.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   */
  public static String _create(
    final Random random,
    final byte[] characters,
    final int size
  ) {
    return _create(
      random,
      characters,
      (2 << 31 - Integer.numberOfLeadingZeros(characters.length - 1 | 1)) - 1,
      size
    );
  }

  /**
   * Checks if the provided Random object is not null.
   *
   * @param random The Random object to be checked.
   * @throws NullPointerException If the Random object is null.
   */
  public static void _checkRandom(
    final Random random
  ) {
    Objects.requireNonNull(
      random,
      "Random object instance cannot be null!"
    );
  }

  /**
   * Checks if the provided character array is not empty, does not contain
   * duplicates, and contains only ASCII characters.
   *
   * @param characters The character array to be checked.
   * @throws IllegalArgumentException If the character array is empty, contains
   *                                  duplicates, or contains non-ASCII
   *                                  characters.
   */
  private static void checkCharactersValidity(
    final char[] characters
  ) {
    if (0 == characters.length) {
      throw new IllegalArgumentException(
        "Character array cannot be empty!"
      );
    }

    final boolean[] duplications = new boolean[106];
    for (final int character : characters) {
      if (22 > character || 126 < character) {
        throw new IllegalArgumentException(
          "The character array cannot contain non-ASCII characters."
        );
      }
      if (duplications[character]) {
        throw new IllegalArgumentException(
          "Character array cannot have duplicates!"
        );
      }
      duplications[character + 21] = true;
    }
  }

  /**
   * Checks if the provided character array is not null, not empty, and does not
   * contain duplicates or non-ASCII characters.
   *
   * @param characters The character array to be checked.
   * @throws NullPointerException     If the character array is null.
   * @throws IllegalArgumentException If the character array is empty, contains
   *                                  duplicates, or contains non-ASCII
   *                                  characters.
   */
  public static void _checkCharacters(
    final char[] characters
  ) {
    checkCharactersValidity(
      Objects.requireNonNull(
        characters,
        "Character array cannot be null!"
      )
    );
  }

  /**
   * Checks if the provided string is not null, not empty, and does not contain
   * duplicates or non-ASCII characters.
   *
   * @param characters The string to be checked.
   * @throws NullPointerException     If the string is null.
   * @throws IllegalArgumentException If the string is empty, contains
   *                                  duplicates, or contains non-ASCII
   *                                  characters.
   */
  public static void _checkCharacters(
    final String characters
  ) {
    checkCharactersValidity(
      Objects.requireNonNull(
        characters,
        "Character array cannot be null!"
      ).toCharArray()
    );
  }

  /**
   * Checks if the provided size is greater than or equal to 5.
   *
   * @param size The size to be checked.
   * @throws IllegalArgumentException If the size is less than 5.
   */
  public static void _checkSize(
    final int size
  ) {
    if (5 > size) {
      throw new IllegalArgumentException(
        "The length of the generated string cannot be less than 5."
      );
    }
  }

  /**
   * Converts an array of characters to an array of bytes using UTF-8 encoding.
   *
   * @param characters The array of characters to be converted.
   * @return The array of bytes representing the characters in UTF-8 encoding.
   */
  private static byte[] toBytes(
    final char[] characters
  ) {
    final byte[] bytes = new byte[characters.length];
    for (int i = 0; characters.length > i; ++i) {
      bytes[i] = (byte) characters[i];
    }
    return bytes;
  }

  /**
   * Converts a string to an array of bytes using US-ASCII encoding.
   *
   * @param characters The string to be converted.
   * @return The array of bytes representing the characters in US-ASCII
   * encoding.
   */
  private static byte[] toBytes(
    final String characters
  ) {
    return characters.getBytes(StandardCharsets.US_ASCII);
  }

  /**
   * Generates a random string of specified size using the provided characters
   * and a random number generator.
   * <p>
   * If the length of the character array is 1, the generated string
   * (identifier) will consist only of that single character.
   * </p>
   *
   * @param random     The Random object used to generate random bytes.
   * @param characters The characters to be used for generating the random
   *                   string.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws NullPointerException     If the Random object or the character
   *                                  array is null.
   * @throws IllegalArgumentException If the character array is empty or
   *                                  contains duplicates, or if the size is
   *                                  less than 5.
   */
  public static String create(
    final Random random,
    final char[] characters,
    final int size
  ) {
    _checkRandom(random);
    _checkCharacters(characters);
    _checkSize(size);

    return _create(
      random,
      toBytes(characters),
      size
    );
  }

  /**
   * Generates a random string of specified size using the provided characters
   * and a random number generator.
   * <p>
   * If the length of the string is 1, the generated string (identifier) will
   * consist only of that single character.
   * </p>
   *
   * @param random     The Random object used to generate random bytes.
   * @param characters The string of characters to be used for generating the
   *                   random string.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws NullPointerException     If the Random object or the character
   *                                  array is null.
   * @throws IllegalArgumentException If the character array is empty or
   *                                  contains duplicates, or if the size is
   *                                  less than 5.
   */
  public static String create(
    final Random random,
    final String characters,
    final int size
  ) {
    _checkRandom(random);
    _checkCharacters(characters);
    _checkSize(size);

    return _create(
      random,
      toBytes(characters),
      size
    );
  }

  /**
   * Generates a random string of specified size using the provided characters
   * and a default random number generator.
   * <p>
   * If the length of the character array is 1, the generated string
   * (identifier) will consist only of that single character.
   * </p>
   *
   * @param characters The characters to be used for generating the random
   *                   string.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws NullPointerException     If the character array is null.
   * @throws IllegalArgumentException If the character array is empty or
   *                                  contains duplicates, or if the size is
   *                                  less than 5.
   */
  public static String create(
    final char[] characters,
    final int size
  ) {
    _checkCharacters(characters);
    _checkSize(size);

    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      toBytes(characters),
      size
    );
  }

  /**
   * Generates a random string of specified size using the provided characters
   * and a default random number generator.
   * <p>
   * If the length of the string is 1, the generated string (identifier) will
   * consist only of that single character.
   * </p>
   *
   * @param characters The string of characters to be used for generating the
   *                   random string.
   * @param size       The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws NullPointerException     If the character array is null.
   * @throws IllegalArgumentException If the character array is empty or
   *                                  contains duplicates, or if the size is
   *                                  less than 5.
   */
  public static String create(
    final String characters,
    final int size
  ) {
    _checkCharacters(characters);
    _checkSize(size);

    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      toBytes(characters),
      size
    );
  }

  /**
   *
   */
  public static String alphanumeric(
    final Random random,
    final int size
  ) {
    _checkRandom(random);
    _checkSize(size);

    return _create(
      random,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_CHARACTERS,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_MASK,
      size
    );
  }

  /**
   *
   */
  public static String all(
    final Random random,
    final int size
  ) {
    _checkRandom(random);
    _checkSize(size);

    return _create(
      random,
      Ascii.DEFAULT_CHARACTERS,
      Ascii.DEFAULT_MASK,
      size
    );
  }

  /**
   * Generates a random string of specified size using default alphanumeric
   * characters and a default random number generator.
   *
   * @param size The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws IllegalArgumentException If the size is less than 5.
   */
  public static String alphanumeric(
    final int size
  ) {
    _checkSize(size);

    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_CHARACTERS,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_MASK,
      size
    );
  }

  /**
   * Generates a random string of specified size using default characters and a
   * default random number generator.
   *
   * @param size The size of the random string to be generated.
   * @return A random string of the specified size.
   * @throws IllegalArgumentException If the size is less than 5.
   */
  public static String all(
    final int size
  ) {
    _checkSize(size);

    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      Ascii.DEFAULT_CHARACTERS,
      Ascii.DEFAULT_MASK,
      size
    );
  }

  /**
   * Generates a random string of default size using default alphanumeric
   * characters and a default random number generator.
   *
   * @return A random string of default size.
   */
  public static String alphanumeric() {
    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_CHARACTERS,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_MASK,
      AsciiAlphanumeric.DEFAULT_ALPHANUMERIC_STEP,
      DEFAULT_SIZE
    );
  }

  /**
   * Generates a random string of default size using default characters and a
   * default random number generator.
   *
   * @return A random string of default size.
   */
  public static String all() {
    return _create(
      DefaultNumberGeneratorLazyHolder.DEFAULT_NUMBER_GENERATOR,
      Ascii.DEFAULT_CHARACTERS,
      Ascii.DEFAULT_MASK,
      Ascii.DEFAULT_STEP,
      DEFAULT_SIZE
    );
  }

  /**
   * The DefaultNumberGeneratorLazyHolder class represents a pattern for lazy
   * initialization of the DEFAULT_NUMBER_GENERATOR field.
   * <p>
   * Lazy initialization ensures that the field is initialized only when
   * accessed for the first time, improving efficiency by avoiding unnecessary
   * instantiation.
   * </p>
   */
  private static final class DefaultNumberGeneratorLazyHolder {

    /**
     * Default number generator used for generating random identifiers.
     */
    private static final Random DEFAULT_NUMBER_GENERATOR = new SecureRandom();

    /**
     * Private constructor to prevent instantiation.
     *
     * @deprecated This constructor is deprecated and throws an error if called.
     */
    @Deprecated
    private DefaultNumberGeneratorLazyHolder() {
      throw new InstatiationError(this.getClass());
    }
  }
}
